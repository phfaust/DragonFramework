package DragonApp;
import java.util.List;
import java.util.Scanner;
import framework.DragonFramework;

public class Main {
	boolean isRunning = false;
	boolean hasUser = false;
	Scanner sc = new Scanner(System.in);
	DragonFramework df;
	EntryPoint entry;
	
	public Main(EntryPoint entry){
		df = new DragonFramework();
		this.entry = entry;
	}
	
	public void run() throws Exception {
		System.out.println("WELCOME TO DRAGON GAME!");
		System.out.println("You are trap in this maze.\nSolve the puzzles and figure a way out before the dragon turns you in to ashes. \nUse command 'Register (name)' to load/create a game.\n");	
		showUsers();
		startgame();
	}	
	
    public void startgame() throws Exception {
    	//INITIALIZE    	
    	isRunning = true;
    	//RUN
    	while(isRunning){
	    	String in = sc.nextLine();
	    	in = in.trim();
	    	Object o = df.in(in);
	    	try {
		    	if(!(boolean) o ){
		    		isRunning =  false;
		    		System.out.println("Game over.\n \n");
		    		run();
		    	}
	    	} catch(Exception e) {
	    		if(!hasUser){
	    			initUser((String) o);
	    		} else {
	    			save((String) o);
	    			System.out.println("Use command 'Register (name)' to load/create a game.\n");
	    			showUsers();
	    		}
	    	}
    	}
    }
    
    private void showUsers(){
    	List<DragonApp.entity.User> users =  entry.getAll();
    	if(users.size() == 0){
    		System.out.println("There are no existing users..");
    	}
    	else {
    		System.out.println("Existing Users:");
    		for(DragonApp.entity.User u : users){
    			System.out.println("   " + u.getName());
    		}
    		System.out.println("\n");
    	}
    }
	
	private void initUser(String user) {
		DragonApp.entity.User u  = entry.findUser(user);
		if(u != null){
			df.currentRoom = u.getRoom();
			df.gameState = u.getStatus();
			System.out.println("Loaded game for user " + user);
		}else {
			u = new DragonApp.entity.User();
			df.currentRoom = "Room1";
			entry.createUser(u, user, df.currentRoom, df.gameState);
			System.out.println("Created user " + user);
		}
		hasUser = true;
	}

	private void save(String user) {
		entry.saveUser(entry.findUser(user), df.currentRoom, df.gameState);
	}	
}
